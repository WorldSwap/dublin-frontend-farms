{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","components/Countdown/index.tsx","hooks/useHarvest.ts","utils/erc20.ts","config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","console","log","times","toString","getReferralAddress","deposit","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","referralAddress","localStorage","getItem","length","CountdownWrapper","styled","EstimatedText","div","BlockNumber","p","theme","colors","primary","hourSeconds","daySeconds","renderTime","dimension","time","style","fontSize","Countdown","now","Date","remainingSeconds","edition","startTime","getTime","daysDuration","Math","ceil","isXl","useMatchBreakpoints","countdownUrl","startBlock","timerProps","isPlaying","size","strokeWidth","href","target","rel","duration","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","color","marginBottom","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","tokenBnbPid","FlexLayout","Wrapper","ExpandableSectionButton","onClick","expanded","aria-label","role","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","depositFee","tokenSymbol","alignItems","mb","flexDirection","useStake","onStake","info","useUnstake","onUnstake","StyledSpacer","props","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","tokenPoolPid","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","error","textTransform","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","symbolLower","toLocaleLowerCase","quoteSymbolLower","toLowerCase","src","alt","width","height","className","marginLeft","totalValue","lpTotalInQuoteToken","tvl","tokenDecimals","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","perBlockKey","tokenKeyMasterChef","cakeRewardPerYear","poolWeight","comparedTo","Page","textAlign","poolPrimaryTitle","farmPrimaryTitle","poolSecondaryTitle","farmSecondaryTitle","exact","bottomIllustration"],"mappings":"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","file":"static/js/8.6d0bd96d.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { edition } from 'edition'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  console.log('PARAMS =>', pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralAddress())\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0', getReferralAddress())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst getReferralAddress = () => {\n  const referralAddress = localStorage.getItem('ref')\n  return referralAddress && referralAddress.length === 42 ? referralAddress : '0x294E0DF4787A4c69608B66528b4f00fec3Fb454C'\n}\n","/* eslint-disable no-bitwise */\n\nimport React from 'react'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport styled from 'styled-components'\nimport { edition } from 'edition'\n\nconst CountdownWrapper = styled.a`\n  display: flex;\n  justify-content: space-around;\n  font-family: sans-serif;\n  text-align: center;\n  padding-top: 40px;\n  width: 100%;\n  margin: 0 auto 32px;\n`\n\nconst EstimatedText = styled.div`\n  text-align: center;\n`\n\nconst BlockNumber = styled.p`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst minuteSeconds = 60\nconst hourSeconds = 3600\nconst daySeconds = 86400\n\nconst renderTime = (dimension, time) => (\n  <div>\n    <div style={{ fontSize: 32 }}>{time}</div>\n    <div>{dimension}</div>\n  </div>\n)\n\nconst getTimeSeconds = (time: number) => (minuteSeconds - time) | 0\nconst getTimeMinutes = (time: number) => ((time % hourSeconds) / minuteSeconds) | 0\nconst getTimeHours = (time: number) => ((time % daySeconds) / hourSeconds) | 0\nconst getTimeDays = (time: number) => (time / daySeconds) | 0\n\nexport default function Countdown() {\n  const now = Date.now()\n\n  const remainingSeconds = (edition.startTime.getTime() - now) / 1000\n  const days = Math.ceil(remainingSeconds / daySeconds)\n  const daysDuration = days * daySeconds\n  const { isXl } = useMatchBreakpoints()\n  const countdownUrl = `https://bscscan.com/block/countdown/${edition.startBlock}`\n\n  if (now > edition.startTime.getTime()) {\n    return <></>\n  }\n\n  const timerProps = {\n    isPlaying: true,\n    size: isXl ? 120 : 80,\n    strokeWidth: isXl ? 6 : 2,\n  }\n\n  return (\n    <>\n      <CountdownWrapper href={countdownUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n        <CountdownCircleTimer\n          {...timerProps}\n          colors=\"#7E2E84\"\n          duration={daysDuration}\n          initialRemainingTime={remainingSeconds}\n        >\n          {({ elapsedTime }) => renderTime('days', getTimeDays(daysDuration - elapsedTime))}\n        </CountdownCircleTimer>\n        <CountdownCircleTimer\n          {...timerProps}\n          colors=\"#D14081\"\n          duration={daySeconds}\n          initialRemainingTime={remainingSeconds % daySeconds}\n          onComplete={(totalElapsedTime) => [remainingSeconds - totalElapsedTime > hourSeconds, 0]}\n        >\n          {({ elapsedTime }) => renderTime('hours', getTimeHours(daySeconds - elapsedTime))}\n        </CountdownCircleTimer>\n        <CountdownCircleTimer\n          {...timerProps}\n          colors=\"#EF798A\"\n          duration={hourSeconds}\n          initialRemainingTime={remainingSeconds % hourSeconds}\n          onComplete={(totalElapsedTime) => [remainingSeconds - totalElapsedTime > minuteSeconds, 0]}\n        >\n          {({ elapsedTime }) => renderTime('minutes', getTimeMinutes(hourSeconds - elapsedTime))}\n        </CountdownCircleTimer>\n        <CountdownCircleTimer\n          {...timerProps}\n          colors=\"#218380\"\n          duration={minuteSeconds}\n          initialRemainingTime={remainingSeconds % minuteSeconds}\n          onComplete={(totalElapsedTime) => [remainingSeconds - totalElapsedTime > 0, 0]}\n        >\n          {({ elapsedTime }) => renderTime('seconds', getTimeSeconds(elapsedTime))}\n        </CountdownCircleTimer>\n      </CountdownWrapper>\n      <EstimatedText>\n        <p style={{ color: 'white', marginBottom: 16 }}>\n          <strong>{edition.startTime.toString()}</strong>\n        </p>\n        <BlockNumber>\n          <a href={countdownUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            Farming starts in Block #{edition.startBlock}\n          </a>\n        </BlockNumber>\n      </EstimatedText>\n    </>\n  )\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js/bignumber'\nimport { edition } from 'edition'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = edition.tokenBnbPid\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.worldswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.worldswap.finance/#/add/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: JSX.Element\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      {/* <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} /> */}\n      {farmImage}\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport { edition } from 'edition'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === edition.tokenPoolPid ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport { edition } from 'edition'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {edition.tokenSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport { edition } from 'edition'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {edition.tokenSymbol} per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { edition } from 'edition'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\nconst Flew = styled.div`\n  display: flex;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n\n  const symbolLower = farm.tokenSymbol.toLocaleLowerCase()\n  const quoteSymbolLower = farm.quoteTokenSymbol.toLowerCase()\n  const farmImage = farm.isTokenOnly ? (\n    <img src={`/images/farms/${symbolLower}.png`} alt={symbolLower} width={64} height={64} style={{ height: 64 }} />\n  ) : (\n    <Flex className=\"flex space-x-1\">\n      <img src={`/images/farms/${symbolLower}.png`} alt={symbolLower} width={48} height={48} style={{ height: 48 }} />\n      <img\n        src={`/images/farms/${quoteSymbolLower}.png`}\n        alt={quoteSymbolLower}\n        width={48}\n        height={48}\n        style={{ marginLeft: '-18px', height: 48 }}\n      />\n    </Flex>\n  )\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    let tvl = farm.lpTotalInQuoteToken\n\n    // fix tvl for non 18-decimal tokens\n    if (farm.tokenDecimals && farm.tokenDecimals < 18) {\n      if (!(tvl instanceof BigNumber)) {\n        tvl = new BigNumber(tvl)\n      }\n      tvl = tvl.dividedBy(10 ** (18 - farm.tokenDecimals))\n    }\n\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(tvl)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(tvl)\n    }\n    return tvl\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol, farm.tokenDecimals])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === edition.tokenSymbol && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farm.lpSymbol === '1INCH' ? 'Unknown' : `${farmAPY}%`}\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{edition.tokenSymbol}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport { edition } from 'edition'\nimport Countdown from 'components/Countdown'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm: FarmWithStakedValue) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const perBlockKey = `${edition.tokenKeyMasterChef}PerBlock`\n        const cakeRewardPerBlock = new BigNumber(farm[perBlockKey] || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (farm.tokenDecimals && farm.tokenDecimals < 18) {\n          totalValue = totalValue.div(10 ** (18 - farm.tokenDecimals))\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <div style={{ marginBottom: 64 }}>\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n          {tokenMode ? edition.poolPrimaryTitle : edition.farmPrimaryTitle}\n        </Heading>\n        <Heading as=\"h2\" color=\"secondary\" style={{ textAlign: 'center' }}>\n          {tokenMode ? edition.poolSecondaryTitle : edition.farmSecondaryTitle}\n        </Heading>\n        <Countdown />\n      </div>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {edition.bottomIllustration}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}